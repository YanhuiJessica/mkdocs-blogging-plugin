{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation \u00b6 # macOS or Linux pip3 install mkdocs-blogging-plugin # Windows pip install mkdocs-blogging-plugin Prerequisites \u00b6 Only material theme is adapted by far navigation.instant feature cannot be enabled if blog paging is on Pull requests are welcome to break these constraints. Usage \u00b6 Before setting up the plugin, set site_url to the url of your published site: mkdocs.yml site_url : https://liang2kl.github.io/mkdocs-blogging-plugin/ Basic \u00b6 Add blogging in plugins and specify the directories to be included. This is the minimum configuration needed. mkdocs.yml plugins : - blogging : dirs : # The directories to be included - blog In the page you want to insert the blog content, add a line {{ blog_content }} into your desired place: blog index page # Blogs {{ blog_content }} That's all. You can open the page where you insert {{ blog_content }} and see how it is working. More Configurations \u00b6 Optionally, in your articles, add meta tags providing their titles and descriptions, which will be displayed on the blog page: article --- title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. --- You can also set tags for all articles. First, turn on this feature in the configuration: mkdocs.yml plugins : - blogging : features : tags : {} And in articles: article --- tags: - mkdocs - blogging --- For more detail, check Features - tags . Finally, to exclude certain pages from the blog collection, add a meta tag exclude_from_blog in the meta section of the markdown file: article --- exclude_from_blog: true --- Categories \u00b6 Some people might need to setup different blog page, serving different sets of articles (see this issue ). For example, one might setup a page for technical articles, and another for life recording. Another example is a multi-language site, where we use different blog pages to display articles of different languages. The plugin supports generating different blog index pages based on a concept named category . A category is simply a group of directories used to generate a blog page. For example: categories plugins : - blogging : # {{ blog_content }} dirs : - blogs # {{ blog_content review }} categories : - name : review dirs : - review We setup two categories here. The first one is the default category defining at the top level which includes the articles in blogs , and the second is a named category which includes the articles in reviews . Why there's a default category Versions before v2.0 didn't support category-based settings, so we preserve the top-level configuration for backward compatibility. To generate a blog page for the default category: index page for the default category {{ blog_content }} To generate a blog page for a named category (in our case, review ): index page for category 'review' {{ blog_content review }} Options \u00b6 Category-specific Settings \u00b6 You can specify the included directories for each category and configure the options seperately. The category-specific settings include: category settings dirs : # The directories included in the category - reviews - ... size : 5 # Number of articles in one page, default: 10 sort : from : new # Sort from new to old, default # or old # Sort from old to new by : creation # Sort by the first commit time, default # or revision # Sort by the latest commit time paging : false # Disable paging show_total : false # Remove 'total pages' label full_content : true # Use the full content for blog description template : blog-override.html # Path to customized template theme : # Use a predefined theme name : card The structure for the configuration in mkdocs.yml : mkdocs.yml plugins : - blogging : dirs : - blogs size : 5 ... categories : - name : review dirs : - review size : 10 ... For more about themes and custom templates, see Themes and Template respectively. Global Settings \u00b6 Aside from the category settings, there are some globally applied options, which should be defined at the top level of the plugin configuration: mkdocs.yml features : # Additional features tags : ... locale : en # The locale for time localizations, default: system's locale time_format : '%Y-%m-%d %H:%M:%S' # The format used to display the time meta_time_format : '%Y-%m-%d %H:%M:%S' # The format used to parse the time from meta Of all the options mentioned above, these deserve special attention: time_format in global settings is used to change the display style of the time, with higher priority than locale . meta_time_format in global settings is used to tell the plugin how to parse the given time string from the meta. When meta_time_format is set, for all posts with a time or date metadata, the plugin will use this format to parse the that time, and replace the time from git logs. This is useful to alter specific posts' time when git commit time is not accurate or desired. See the list of datetime placeholders . When paging in category settings is set to false , if size is not set, all posts will be displayed on the first page; otherwise the first size posts will be displayed and the rest will not . Publish with Github Pages \u00b6 A few more steps need to be taken for hosting with Github Pages: Set fetch-depth to 0 when checking out with actions/checkout github action - uses : actions/checkout@v2 with : fetch-depth : 0 Creation and revision time for articles rely on git logs, so a complete respository is required. If it is not set, the plugin will take the build time as fallback. Configure your locale in the plugin's configuration article plugins : - blogging : locale : zh-CN Otherwise, the plugin will use locale of the server, which might not be expected.","title":"Setup"},{"location":"#installation","text":"# macOS or Linux pip3 install mkdocs-blogging-plugin # Windows pip install mkdocs-blogging-plugin","title":"Installation"},{"location":"#prerequisites","text":"Only material theme is adapted by far navigation.instant feature cannot be enabled if blog paging is on Pull requests are welcome to break these constraints.","title":"Prerequisites"},{"location":"#usage","text":"Before setting up the plugin, set site_url to the url of your published site: mkdocs.yml site_url : https://liang2kl.github.io/mkdocs-blogging-plugin/","title":"Usage"},{"location":"#basic","text":"Add blogging in plugins and specify the directories to be included. This is the minimum configuration needed. mkdocs.yml plugins : - blogging : dirs : # The directories to be included - blog In the page you want to insert the blog content, add a line {{ blog_content }} into your desired place: blog index page # Blogs {{ blog_content }} That's all. You can open the page where you insert {{ blog_content }} and see how it is working.","title":"Basic"},{"location":"#more-configurations","text":"Optionally, in your articles, add meta tags providing their titles and descriptions, which will be displayed on the blog page: article --- title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. --- You can also set tags for all articles. First, turn on this feature in the configuration: mkdocs.yml plugins : - blogging : features : tags : {} And in articles: article --- tags: - mkdocs - blogging --- For more detail, check Features - tags . Finally, to exclude certain pages from the blog collection, add a meta tag exclude_from_blog in the meta section of the markdown file: article --- exclude_from_blog: true ---","title":"More Configurations"},{"location":"#categories","text":"Some people might need to setup different blog page, serving different sets of articles (see this issue ). For example, one might setup a page for technical articles, and another for life recording. Another example is a multi-language site, where we use different blog pages to display articles of different languages. The plugin supports generating different blog index pages based on a concept named category . A category is simply a group of directories used to generate a blog page. For example: categories plugins : - blogging : # {{ blog_content }} dirs : - blogs # {{ blog_content review }} categories : - name : review dirs : - review We setup two categories here. The first one is the default category defining at the top level which includes the articles in blogs , and the second is a named category which includes the articles in reviews . Why there's a default category Versions before v2.0 didn't support category-based settings, so we preserve the top-level configuration for backward compatibility. To generate a blog page for the default category: index page for the default category {{ blog_content }} To generate a blog page for a named category (in our case, review ): index page for category 'review' {{ blog_content review }}","title":"Categories"},{"location":"#options","text":"","title":"Options"},{"location":"#category-specific-settings","text":"You can specify the included directories for each category and configure the options seperately. The category-specific settings include: category settings dirs : # The directories included in the category - reviews - ... size : 5 # Number of articles in one page, default: 10 sort : from : new # Sort from new to old, default # or old # Sort from old to new by : creation # Sort by the first commit time, default # or revision # Sort by the latest commit time paging : false # Disable paging show_total : false # Remove 'total pages' label full_content : true # Use the full content for blog description template : blog-override.html # Path to customized template theme : # Use a predefined theme name : card The structure for the configuration in mkdocs.yml : mkdocs.yml plugins : - blogging : dirs : - blogs size : 5 ... categories : - name : review dirs : - review size : 10 ... For more about themes and custom templates, see Themes and Template respectively.","title":"Category-specific Settings"},{"location":"#global-settings","text":"Aside from the category settings, there are some globally applied options, which should be defined at the top level of the plugin configuration: mkdocs.yml features : # Additional features tags : ... locale : en # The locale for time localizations, default: system's locale time_format : '%Y-%m-%d %H:%M:%S' # The format used to display the time meta_time_format : '%Y-%m-%d %H:%M:%S' # The format used to parse the time from meta Of all the options mentioned above, these deserve special attention: time_format in global settings is used to change the display style of the time, with higher priority than locale . meta_time_format in global settings is used to tell the plugin how to parse the given time string from the meta. When meta_time_format is set, for all posts with a time or date metadata, the plugin will use this format to parse the that time, and replace the time from git logs. This is useful to alter specific posts' time when git commit time is not accurate or desired. See the list of datetime placeholders . When paging in category settings is set to false , if size is not set, all posts will be displayed on the first page; otherwise the first size posts will be displayed and the rest will not .","title":"Global Settings"},{"location":"#publish-with-github-pages","text":"A few more steps need to be taken for hosting with Github Pages: Set fetch-depth to 0 when checking out with actions/checkout github action - uses : actions/checkout@v2 with : fetch-depth : 0 Creation and revision time for articles rely on git logs, so a complete respository is required. If it is not set, the plugin will take the build time as fallback. Configure your locale in the plugin's configuration article plugins : - blogging : locale : zh-CN Otherwise, the plugin will use locale of the server, which might not be expected.","title":"Publish with Github Pages"},{"location":"features/","text":"Tags \u00b6 This feature enables you to set tags for articles, which can be used to group them into different topics. Setup \u00b6 First, enable tags in the features entry of the configuration. Note that it is a dict, so by default (with no customize options), you should provide an empty dict {} : mkdocs.yml features : tags : {} And, in any article to be tagged (including those not in the designated blog collection), add any number of tags in the meta section: article --- tags: - mkdocs - blogging --- Now, if you are not using customized templates, the tags will be displayed on the blog entries. For those who use a customized template , you need a little extra work to get there. In the place you want to insert the tags of a page, insert following content, where page should be replaced by your naming of the variable, if necessary: template {% if show_tags and \"tags\" in page.meta %} {% call render_tags ( page.meta [ \"tags\" ], index_url ) %} {% endcall %} {% endif %} Get an index page \u00b6 Additionally, you can create an index page for all the tags and associated entries out of the box. Just like the blog content, add {{ tag_content }} in your desired position, and an index page will be there for you. tags index page # Tags {{ tag_content }} Although you can insert the \"index\" page in multiple pages, it is recommended to specify a single index page, so that we can navigate the viewer to that page when they click on the tags. To achieve this, set index_page with the relative path of one of the page with {{ tag_content }} : mkdocs.yml features : tags : index_page : tags.md Insert tags in articles \u00b6 You can display the tags of the article inside it if you like. Set insert to top or bottom , to add the tags to the top or bottom of all articles with at least one tag. mkdocs.yml features : tags : insert : top Best practices rather than using Header 1 in the markdown, set the title in the meta section: article --- title: Lorem ipsum dolor sit amet --- With this, the tags will be correctly displayed below the header, rather than above it.","title":"Features"},{"location":"features/#tags","text":"This feature enables you to set tags for articles, which can be used to group them into different topics.","title":"Tags"},{"location":"features/#setup","text":"First, enable tags in the features entry of the configuration. Note that it is a dict, so by default (with no customize options), you should provide an empty dict {} : mkdocs.yml features : tags : {} And, in any article to be tagged (including those not in the designated blog collection), add any number of tags in the meta section: article --- tags: - mkdocs - blogging --- Now, if you are not using customized templates, the tags will be displayed on the blog entries. For those who use a customized template , you need a little extra work to get there. In the place you want to insert the tags of a page, insert following content, where page should be replaced by your naming of the variable, if necessary: template {% if show_tags and \"tags\" in page.meta %} {% call render_tags ( page.meta [ \"tags\" ], index_url ) %} {% endcall %} {% endif %}","title":"Setup"},{"location":"features/#get-an-index-page","text":"Additionally, you can create an index page for all the tags and associated entries out of the box. Just like the blog content, add {{ tag_content }} in your desired position, and an index page will be there for you. tags index page # Tags {{ tag_content }} Although you can insert the \"index\" page in multiple pages, it is recommended to specify a single index page, so that we can navigate the viewer to that page when they click on the tags. To achieve this, set index_page with the relative path of one of the page with {{ tag_content }} : mkdocs.yml features : tags : index_page : tags.md","title":"Get an index page"},{"location":"features/#insert-tags-in-articles","text":"You can display the tags of the article inside it if you like. Set insert to top or bottom , to add the tags to the top or bottom of all articles with at least one tag. mkdocs.yml features : tags : insert : top Best practices rather than using Header 1 in the markdown, set the title in the meta section: article --- title: Lorem ipsum dolor sit amet --- With this, the tags will be correctly displayed below the header, rather than above it.","title":"Insert tags in articles"},{"location":"migration/","text":"Migration Guide \u00b6 v0.2.x to v0.3.x \u00b6 Breaking changes: Added a new paramter page to render_blog . Effect: This will stop previous macro definitions from working. Workaround: Add a trailing parameter page to the marco. Introduced new reserved template file names: blog-*-theme.html . Effect: If you have templates using these names, they might stop working now or in the future. Workaround: Rename them if your existing names of your templates have this pattern. v0.3.x to v1.0.x \u00b6 Breaking changes: Introduced new reserved template file names: blog-*.html . Effect: If you have templates using these names, they might stop working now or in the future. Workaround: Rename them if your existing names of your templates have this pattern. To v1.4.0 \u00b6 Breaking changes: Change post display behaviour when paging is disabled. Effect: Posts will be truncated if paging = false and size co-exist. Workaround: If you need to keep all posts when paging is disabled, remove size .","title":"Migration Guide"},{"location":"migration/#migration-guide","text":"","title":"Migration Guide"},{"location":"migration/#v02x-to-v03x","text":"Breaking changes: Added a new paramter page to render_blog . Effect: This will stop previous macro definitions from working. Workaround: Add a trailing parameter page to the marco. Introduced new reserved template file names: blog-*-theme.html . Effect: If you have templates using these names, they might stop working now or in the future. Workaround: Rename them if your existing names of your templates have this pattern.","title":"v0.2.x to v0.3.x"},{"location":"migration/#v03x-to-v10x","text":"Breaking changes: Introduced new reserved template file names: blog-*.html . Effect: If you have templates using these names, they might stop working now or in the future. Workaround: Rename them if your existing names of your templates have this pattern.","title":"v0.3.x to v1.0.x"},{"location":"migration/#to-v140","text":"Breaking changes: Change post display behaviour when paging is disabled. Effect: Posts will be truncated if paging = false and size co-exist. Workaround: If you need to keep all posts when paging is disabled, remove size .","title":"To v1.4.0"},{"location":"template/","text":"The template entry in the category settings allows you to override the appearance of the blog page. To customize the appearance, create an HTML template with name other than blog.html and blog-*.html , then provide the path relative to the parent directory of mkdocs.yml to the plugin's configuration. For introduction and usage of HTML templates, refer to jinja's documentation . You have following customization options: Partial Customization \u00b6 You can override how the plugin render a single blog entry through this method. An example can be found here . Customize HTML \u00b6 In your template, import the original template. The template can be the basic blog.html , or one of the built-in themes, like blog-card-theme.html : template {% extends \"blog.html\" %} Then, define a macro named render_blog with parameters title , description , time , url , page , which returns HTML elements that represent a single blog entry. Please note that {{ caller() }} must be present somewhere inside the macro, though it has no use here. template {% macro render_blog ( title , description , time , url , page ) - %} <a href=\" {{ url }} \"> <h3> {{ title }} </h3> </a> <div> {{ description }} </div> <div> {{ time }} </div> <hr/> {{ caller () }} {% - endmacro %} The parameter page allows you to add arbitary additional information to any page using its meta attribute. For example, to show the author's name on the blog page, add an entry author in the markdown file's meta section: article --- author: Liang Yesheng --- Then, access it through page.meta : template {% if \"author\" in page.meta %} <div> {{ page.meta [ \"author\" ] }} </div> {% endif %} and it will display the author. Customize styles \u00b6 Further more, if you want to customize the css, write a block named style . Call {{ super() }} first if you want to preserve the original styles. template {% block style %} {{ super () }} <style> {# your style goes here #} </style> {% endblock %} Check the original template for available customization points. Here are some common ones: .md-typeset .blog-post-title : post title .md-typeset .blog-post-description : post description .md-typeset .blog-post-extra : extra section for creation / revision time Global Override \u00b6 Alternatively, you can provide a template that works completely independent from the original template. These variables are available inside your template: pages : sorted blog pages, see mkdocs' documentation for available attributes page_size : number of articles on a single page is_revision : True if sorted by revision time, False if by creation time show_total : whether to show the total number of the blog You can refer to the original template for help. Access to the Original MkDocs Template Variables \u00b6 Use mkdocs_context inside your template to access variables that are available inside MkDocs' templates. For example, to access config.site_url : <img src=\" {{ mkdocs_context.config.site_url }} /img/1.png\" alt=\"\">","title":"Template"},{"location":"template/#partial-customization","text":"You can override how the plugin render a single blog entry through this method. An example can be found here .","title":"Partial Customization"},{"location":"template/#customize-html","text":"In your template, import the original template. The template can be the basic blog.html , or one of the built-in themes, like blog-card-theme.html : template {% extends \"blog.html\" %} Then, define a macro named render_blog with parameters title , description , time , url , page , which returns HTML elements that represent a single blog entry. Please note that {{ caller() }} must be present somewhere inside the macro, though it has no use here. template {% macro render_blog ( title , description , time , url , page ) - %} <a href=\" {{ url }} \"> <h3> {{ title }} </h3> </a> <div> {{ description }} </div> <div> {{ time }} </div> <hr/> {{ caller () }} {% - endmacro %} The parameter page allows you to add arbitary additional information to any page using its meta attribute. For example, to show the author's name on the blog page, add an entry author in the markdown file's meta section: article --- author: Liang Yesheng --- Then, access it through page.meta : template {% if \"author\" in page.meta %} <div> {{ page.meta [ \"author\" ] }} </div> {% endif %} and it will display the author.","title":"Customize HTML"},{"location":"template/#customize-styles","text":"Further more, if you want to customize the css, write a block named style . Call {{ super() }} first if you want to preserve the original styles. template {% block style %} {{ super () }} <style> {# your style goes here #} </style> {% endblock %} Check the original template for available customization points. Here are some common ones: .md-typeset .blog-post-title : post title .md-typeset .blog-post-description : post description .md-typeset .blog-post-extra : extra section for creation / revision time","title":"Customize styles"},{"location":"template/#global-override","text":"Alternatively, you can provide a template that works completely independent from the original template. These variables are available inside your template: pages : sorted blog pages, see mkdocs' documentation for available attributes page_size : number of articles on a single page is_revision : True if sorted by revision time, False if by creation time show_total : whether to show the total number of the blog You can refer to the original template for help.","title":"Global Override"},{"location":"template/#access-to-the-original-mkdocs-template-variables","text":"Use mkdocs_context inside your template to access variables that are available inside MkDocs' templates. For example, to access config.site_url : <img src=\" {{ mkdocs_context.config.site_url }} /img/1.png\" alt=\"\">","title":"Access to the Original MkDocs Template Variables"},{"location":"theme/","text":"You can select one from the plugin's built-in themes to render your content. If you are to use one of them, in the plugin's config, specify the theme's name, and optionally specify some options to customize the appearance. Note that this is a category-specific setting, so you should set them for each category seperately. mkdocs.yml plugins : - blogging : theme : name : <theme name> options : <theme options> You can use one of the predefined themes: Card \u00b6 Display the blog entries as cards with hover effects. mkdocs.yml plugins : - blogging : theme : name : card Button \u00b6 Add \"Continue Reading\" button. mkdocs.yml plugins : - blogging : theme : name : button options : # Optional # `true` if display the button as plain text # `false` or not present if display as rectangle button plain_button : true # Replacement for 'Continue Reading' label : Read","title":"Theme"},{"location":"theme/#card","text":"Display the blog entries as cards with hover effects. mkdocs.yml plugins : - blogging : theme : name : card","title":"Card"},{"location":"theme/#button","text":"Add \"Continue Reading\" button. mkdocs.yml plugins : - blogging : theme : name : button options : # Optional # `true` if display the button as plain text # `false` or not present if display as rectangle button plain_button : true # Replacement for 'Continue Reading' label : Read","title":"Button"}]}